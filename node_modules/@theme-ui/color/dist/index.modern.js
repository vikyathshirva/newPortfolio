import { darken as darken$1, lighten as lighten$1, adjustHue, setHue, setSaturation, setLightness, desaturate as desaturate$1, saturate as saturate$1, shade as shade$1, tint as tint$1, transparentize as transparentize$1, rgba, mix as mix$1, complement as complement$1, invert as invert$1 } from 'polished';
import { get } from '@theme-ui/css';

/**
 * Get color from theme.colors
 */

const getColor = (theme, color) => get(theme, `colors.${color}`, color).replace(/^var\(--(\w+)(.*?), /, '').replace(/\)/, '');
/**
 * Darken a color by an amount 0–1
 */

const darken = (c, n) => t => darken$1(n, getColor(t, c));
/**
 * Lighten a color by an amount 0–1
 */

const lighten = (c, n) => t => lighten$1(n, getColor(t, c));
/**
 * Rotate the hue of a color by an amount 0–360
 */

const rotate = (c, d) => t => adjustHue(d, getColor(t, c));
/**
 * Set the hue of a color to a degree 0–360
 */

const hue = (c, h) => t => setHue(h, getColor(t, c));
/**
 * Set the saturation of a color to an amount 0–1
 */

const saturation = (c, s) => t => setSaturation(s, getColor(t, c));
/**
 * Set the lightness of a color to an amount 0–1
 */

const lightness = (c, l) => t => setLightness(l, getColor(t, c));
/**
 * Desaturate a color by an amount 0–1
 */

const desaturate = (c, n) => t => desaturate$1(n, getColor(t, c));
/**
 * Saturate a color by an amount 0–1
 */

const saturate = (c, n) => t => saturate$1(n, getColor(t, c));
/**
 * Shade a color by an amount 0–1
 */

const shade = (c, n) => t => shade$1(n, getColor(t, c));
/**
 * Tint a color by an amount 0–1
 */

const tint = (c, n) => t => tint$1(n, getColor(t, c));
const transparentize = (c, n) => t => transparentize$1(n, getColor(t, c));
/**
 * Set the transparency of a color to an amount 0-1
 */

const alpha = (c, n) => t => rgba(getColor(t, c), n);
/**
 * Mix two colors by a specific ratio
 */

const mix = (a, b, n = 0.5) => t => mix$1(n, getColor(t, a), getColor(t, b));
/**
 * Get the complement of a color
 */

const complement = c => t => complement$1(getColor(t, c));
/**
 * Get the inverted color
 */

const invert = c => t => invert$1(getColor(t, c));
/**
 * Desaturate the color to grayscale
 */

const grayscale = c => desaturate(c, 1);

export { alpha, complement, darken, desaturate, getColor, grayscale, hue, invert, lighten, lightness, mix, rotate, saturate, saturation, shade, tint, transparentize };
//# sourceMappingURL=index.modern.js.map
